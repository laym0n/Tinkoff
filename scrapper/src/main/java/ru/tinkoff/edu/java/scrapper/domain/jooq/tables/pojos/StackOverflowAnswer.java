/*
 * This file is generated by jOOQ.
 */

package ru.tinkoff.edu.java.scrapper.domain.jooq.tables.pojos;

import jakarta.validation.constraints.Size;
import java.beans.ConstructorProperties;
import java.io.Serializable;
import java.time.LocalDateTime;
import javax.annotation.processing.Generated;
import org.jetbrains.annotations.NotNull;

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class StackOverflowAnswer implements Serializable {

    private static final long serialVersionUID = 1L;

    private Integer id;
    private String userName;
    private LocalDateTime lastEditDateTime;
    private Integer websiteInfoId;

    public StackOverflowAnswer() {
    }

    public StackOverflowAnswer(StackOverflowAnswer value) {
        this.id = value.id;
        this.userName = value.userName;
        this.lastEditDateTime = value.lastEditDateTime;
        this.websiteInfoId = value.websiteInfoId;
    }

    @ConstructorProperties({"id", "userName", "lastEditDateTime", "websiteInfoId"})
    public StackOverflowAnswer(
        @NotNull Integer id,
        @NotNull String userName,
        @NotNull LocalDateTime lastEditDateTime,
        @NotNull Integer websiteInfoId
    ) {
        this.id = id;
        this.userName = userName;
        this.lastEditDateTime = lastEditDateTime;
        this.websiteInfoId = websiteInfoId;
    }

    /**
     * Getter for <code>STACK_OVERFLOW_ANSWER.ID</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Integer getId() {
        return this.id;
    }

    /**
     * Setter for <code>STACK_OVERFLOW_ANSWER.ID</code>.
     */
    public void setId(@NotNull Integer id) {
        this.id = id;
    }

    /**
     * Getter for <code>STACK_OVERFLOW_ANSWER.USER_NAME</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 40)
    @NotNull
    public String getUserName() {
        return this.userName;
    }

    /**
     * Setter for <code>STACK_OVERFLOW_ANSWER.USER_NAME</code>.
     */
    public void setUserName(@NotNull String userName) {
        this.userName = userName;
    }

    /**
     * Getter for <code>STACK_OVERFLOW_ANSWER.LAST_EDIT_DATE_TIME</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public LocalDateTime getLastEditDateTime() {
        return this.lastEditDateTime;
    }

    /**
     * Setter for <code>STACK_OVERFLOW_ANSWER.LAST_EDIT_DATE_TIME</code>.
     */
    public void setLastEditDateTime(@NotNull LocalDateTime lastEditDateTime) {
        this.lastEditDateTime = lastEditDateTime;
    }

    /**
     * Getter for <code>STACK_OVERFLOW_ANSWER.WEBSITE_INFO_ID</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Integer getWebsiteInfoId() {
        return this.websiteInfoId;
    }

    /**
     * Setter for <code>STACK_OVERFLOW_ANSWER.WEBSITE_INFO_ID</code>.
     */
    public void setWebsiteInfoId(@NotNull Integer websiteInfoId) {
        this.websiteInfoId = websiteInfoId;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final StackOverflowAnswer other = (StackOverflowAnswer) obj;
        if (this.id == null) {
            if (other.id != null) {
                return false;
            }
        } else if (!this.id.equals(other.id)) {
            return false;
        }
        if (this.userName == null) {
            if (other.userName != null) {
                return false;
            }
        } else if (!this.userName.equals(other.userName)) {
            return false;
        }
        if (this.lastEditDateTime == null) {
            if (other.lastEditDateTime != null) {
                return false;
            }
        } else if (!this.lastEditDateTime.equals(other.lastEditDateTime)) {
            return false;
        }
        if (this.websiteInfoId == null) {
            if (other.websiteInfoId != null) {
                return false;
            }
        } else if (!this.websiteInfoId.equals(other.websiteInfoId)) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.userName == null) ? 0 : this.userName.hashCode());
        result = prime * result + ((this.lastEditDateTime == null) ? 0 : this.lastEditDateTime.hashCode());
        result = prime * result + ((this.websiteInfoId == null) ? 0 : this.websiteInfoId.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("StackOverflowAnswer (");

        sb.append(id);
        sb.append(", ").append(userName);
        sb.append(", ").append(lastEditDateTime);
        sb.append(", ").append(websiteInfoId);

        sb.append(")");
        return sb.toString();
    }
}
