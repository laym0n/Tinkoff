/*
 * This file is generated by jOOQ.
 */

package ru.tinkoff.edu.java.scrapper.domain.jooq.tables.records;

import jakarta.validation.constraints.Size;
import java.beans.ConstructorProperties;
import java.time.LocalDateTime;
import javax.annotation.processing.Generated;
import org.jetbrains.annotations.NotNull;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.GithubInfo;

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class GithubInfoRecord extends UpdatableRecordImpl<GithubInfoRecord>
    implements Record4<Integer, String, String, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>GITHUB_INFO.WEBSITE_INFO_ID</code>.
     */
    public void setWebsiteInfoId(@NotNull Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>GITHUB_INFO.WEBSITE_INFO_ID</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Integer getWebsiteInfoId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>GITHUB_INFO.USER_NAME</code>.
     */
    public void setUserName(@NotNull String value) {
        set(1, value);
    }

    /**
     * Getter for <code>GITHUB_INFO.USER_NAME</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 255)
    @NotNull
    public String getUserName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>GITHUB_INFO.REPOSITORY_NAME</code>.
     */
    public void setRepositoryName(@NotNull String value) {
        set(2, value);
    }

    /**
     * Getter for <code>GITHUB_INFO.REPOSITORY_NAME</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 255)
    @NotNull
    public String getRepositoryName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>GITHUB_INFO.LAST_ACTIVITY_DATE_TIME</code>.
     */
    public void setLastActivityDateTime(@NotNull LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>GITHUB_INFO.LAST_ACTIVITY_DATE_TIME</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public LocalDateTime getLastActivityDateTime() {
        return (LocalDateTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row4<Integer, String, String, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row4<Integer, String, String, LocalDateTime> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<Integer> field1() {
        return GithubInfo.GITHUB_INFO.WEBSITE_INFO_ID;
    }

    @Override
    @NotNull
    public Field<String> field2() {
        return GithubInfo.GITHUB_INFO.USER_NAME;
    }

    @Override
    @NotNull
    public Field<String> field3() {
        return GithubInfo.GITHUB_INFO.REPOSITORY_NAME;
    }

    @Override
    @NotNull
    public Field<LocalDateTime> field4() {
        return GithubInfo.GITHUB_INFO.LAST_ACTIVITY_DATE_TIME;
    }

    @Override
    @NotNull
    public Integer component1() {
        return getWebsiteInfoId();
    }

    @Override
    @NotNull
    public String component2() {
        return getUserName();
    }

    @Override
    @NotNull
    public String component3() {
        return getRepositoryName();
    }

    @Override
    @NotNull
    public LocalDateTime component4() {
        return getLastActivityDateTime();
    }

    @Override
    @NotNull
    public Integer value1() {
        return getWebsiteInfoId();
    }

    @Override
    @NotNull
    public String value2() {
        return getUserName();
    }

    @Override
    @NotNull
    public String value3() {
        return getRepositoryName();
    }

    @Override
    @NotNull
    public LocalDateTime value4() {
        return getLastActivityDateTime();
    }

    @Override
    @NotNull
    public GithubInfoRecord value1(@NotNull Integer value) {
        setWebsiteInfoId(value);
        return this;
    }

    @Override
    @NotNull
    public GithubInfoRecord value2(@NotNull String value) {
        setUserName(value);
        return this;
    }

    @Override
    @NotNull
    public GithubInfoRecord value3(@NotNull String value) {
        setRepositoryName(value);
        return this;
    }

    @Override
    @NotNull
    public GithubInfoRecord value4(@NotNull LocalDateTime value) {
        setLastActivityDateTime(value);
        return this;
    }

    @Override
    @NotNull
    public GithubInfoRecord values(
        @NotNull Integer value1,
        @NotNull String value2,
        @NotNull String value3,
        @NotNull LocalDateTime value4
    ) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GithubInfoRecord
     */
    public GithubInfoRecord() {
        super(GithubInfo.GITHUB_INFO);
    }

    /**
     * Create a detached, initialised GithubInfoRecord
     */
    @ConstructorProperties({"websiteInfoId", "userName", "repositoryName", "lastActivityDateTime"})
    public GithubInfoRecord(
        @NotNull Integer websiteInfoId,
        @NotNull String userName,
        @NotNull String repositoryName,
        @NotNull LocalDateTime lastActivityDateTime
    ) {
        super(GithubInfo.GITHUB_INFO);

        setWebsiteInfoId(websiteInfoId);
        setUserName(userName);
        setRepositoryName(repositoryName);
        setLastActivityDateTime(lastActivityDateTime);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised GithubInfoRecord
     */
    public GithubInfoRecord(ru.tinkoff.edu.java.scrapper.domain.jooq.tables.pojos.GithubInfo value) {
        super(GithubInfo.GITHUB_INFO);

        if (value != null) {
            setWebsiteInfoId(value.getWebsiteInfoId());
            setUserName(value.getUserName());
            setRepositoryName(value.getRepositoryName());
            setLastActivityDateTime(value.getLastActivityDateTime());
            resetChangedOnNotNull();
        }
    }
}
