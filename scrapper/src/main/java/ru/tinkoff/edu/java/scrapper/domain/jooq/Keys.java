/*
 * This file is generated by jOOQ.
 */

package ru.tinkoff.edu.java.scrapper.domain.jooq;

import javax.annotation.processing.Generated;
import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.Chat;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.GithubBranch;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.GithubCommit;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.GithubInfo;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.StackOverflowAnswer;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.StackOverflowComment;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.StackoverflowInfo;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.TrackedLink;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.WebsiteInfo;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.WebsiteInfoType;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.records.ChatRecord;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.records.GithubBranchRecord;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.records.GithubCommitRecord;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.records.GithubInfoRecord;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.records.StackOverflowAnswerRecord;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.records.StackOverflowCommentRecord;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.records.StackoverflowInfoRecord;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.records.TrackedLinkRecord;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.records.WebsiteInfoRecord;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.records.WebsiteInfoTypeRecord;

/**
 * A class modelling foreign key relationships and constraints of tables in the
 * default schema.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ChatRecord> CONSTRAINT_1 =
        Internal.createUniqueKey(Chat.CHAT, DSL.name("CONSTRAINT_1"), new TableField[] {Chat.CHAT.ID}, true);
    public static final UniqueKey<GithubBranchRecord> CONSTRAINT_12 =
        Internal.createUniqueKey(GithubBranch.GITHUB_BRANCH,
            DSL.name("CONSTRAINT_12"),
            new TableField[] {GithubBranch.GITHUB_BRANCH.NAME, GithubBranch.GITHUB_BRANCH.WEBSITE_INFO_ID},
            true
        );
    public static final UniqueKey<GithubCommitRecord> CONSTRAINT_2 =
        Internal.createUniqueKey(GithubCommit.GITHUB_COMMIT,
            DSL.name("CONSTRAINT_2"),
            new TableField[] {GithubCommit.GITHUB_COMMIT.SHA, GithubCommit.GITHUB_COMMIT.WEBSITE_INFO_ID},
            true
        );
    public static final UniqueKey<GithubInfoRecord> CONSTRAINT_D8 = Internal.createUniqueKey(GithubInfo.GITHUB_INFO,
        DSL.name("CONSTRAINT_D8"),
        new TableField[] {GithubInfo.GITHUB_INFO.WEBSITE_INFO_ID},
        true
    );
    public static final UniqueKey<GithubInfoRecord> LINK_INFO_GIT_HUB_INFO =
        Internal.createUniqueKey(GithubInfo.GITHUB_INFO,
            DSL.name("LINK_INFO_GIT_HUB_INFO"),
            new TableField[] {GithubInfo.GITHUB_INFO.USER_NAME, GithubInfo.GITHUB_INFO.REPOSITORY_NAME},
            true
        );
    public static final UniqueKey<StackOverflowAnswerRecord> CONSTRAINT_D3 = Internal.createUniqueKey(
        StackOverflowAnswer.STACK_OVERFLOW_ANSWER,
        DSL.name("CONSTRAINT_D3"),
        new TableField[] {StackOverflowAnswer.STACK_OVERFLOW_ANSWER.ID,
            StackOverflowAnswer.STACK_OVERFLOW_ANSWER.WEBSITE_INFO_ID},
        true
    );
    public static final UniqueKey<StackOverflowCommentRecord> CONSTRAINT_F = Internal.createUniqueKey(
        StackOverflowComment.STACK_OVERFLOW_COMMENT,
        DSL.name("CONSTRAINT_F"),
        new TableField[] {StackOverflowComment.STACK_OVERFLOW_COMMENT.ID,
            StackOverflowComment.STACK_OVERFLOW_COMMENT.WEBSITE_INFO_ID},
        true
    );
    public static final UniqueKey<StackoverflowInfoRecord> CONSTRAINT_9 =
        Internal.createUniqueKey(StackoverflowInfo.STACKOVERFLOW_INFO,
            DSL.name("CONSTRAINT_9"),
            new TableField[] {StackoverflowInfo.STACKOVERFLOW_INFO.WEBSITE_INFO_ID},
            true
        );
    public static final UniqueKey<StackoverflowInfoRecord> LINK_INFO_STACK_OVERFLOW_INFO = Internal.createUniqueKey(
        StackoverflowInfo.STACKOVERFLOW_INFO,
        DSL.name("LINK_INFO_STACK_OVERFLOW_INFO"),
        new TableField[] {StackoverflowInfo.STACKOVERFLOW_INFO.QUESTION_ID},
        true
    );
    public static final UniqueKey<TrackedLinkRecord> CONSTRAINT_3 = Internal.createUniqueKey(TrackedLink.TRACKED_LINK,
        DSL.name("CONSTRAINT_3"),
        new TableField[] {TrackedLink.TRACKED_LINK.ID},
        true
    );
    public static final UniqueKey<WebsiteInfoRecord> CONSTRAINT_4 = Internal.createUniqueKey(WebsiteInfo.WEBSITE_INFO,
        DSL.name("CONSTRAINT_4"),
        new TableField[] {WebsiteInfo.WEBSITE_INFO.ID},
        true
    );
    public static final UniqueKey<WebsiteInfoTypeRecord> CONSTRAINT_D =
        Internal.createUniqueKey(WebsiteInfoType.WEBSITE_INFO_TYPE,
            DSL.name("CONSTRAINT_D"),
            new TableField[] {WebsiteInfoType.WEBSITE_INFO_TYPE.ID},
            true
        );

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<GithubBranchRecord, GithubInfoRecord> CONSTRAINT_129 = Internal.createForeignKey(
        GithubBranch.GITHUB_BRANCH,
        DSL.name("CONSTRAINT_129"),
        new TableField[] {GithubBranch.GITHUB_BRANCH.WEBSITE_INFO_ID},
        Keys.CONSTRAINT_D8,
        new TableField[] {GithubInfo.GITHUB_INFO.WEBSITE_INFO_ID},
        true
    );
    public static final ForeignKey<GithubCommitRecord, GithubInfoRecord> CONSTRAINT_2B = Internal.createForeignKey(
        GithubCommit.GITHUB_COMMIT,
        DSL.name("CONSTRAINT_2B"),
        new TableField[] {GithubCommit.GITHUB_COMMIT.WEBSITE_INFO_ID},
        Keys.CONSTRAINT_D8,
        new TableField[] {GithubInfo.GITHUB_INFO.WEBSITE_INFO_ID},
        true
    );
    public static final ForeignKey<GithubInfoRecord, WebsiteInfoRecord> CONSTRAINT_D89 = Internal.createForeignKey(
        GithubInfo.GITHUB_INFO,
        DSL.name("CONSTRAINT_D89"),
        new TableField[] {GithubInfo.GITHUB_INFO.WEBSITE_INFO_ID},
        Keys.CONSTRAINT_4,
        new TableField[] {WebsiteInfo.WEBSITE_INFO.ID},
        true
    );
    public static final ForeignKey<StackOverflowAnswerRecord, StackoverflowInfoRecord> CONSTRAINT_D33 =
        Internal.createForeignKey(StackOverflowAnswer.STACK_OVERFLOW_ANSWER,
            DSL.name("CONSTRAINT_D33"),
            new TableField[] {StackOverflowAnswer.STACK_OVERFLOW_ANSWER.WEBSITE_INFO_ID},
            Keys.CONSTRAINT_9,
            new TableField[] {StackoverflowInfo.STACKOVERFLOW_INFO.WEBSITE_INFO_ID},
            true
        );
    public static final ForeignKey<StackOverflowCommentRecord, StackoverflowInfoRecord> CONSTRAINT_FF =
        Internal.createForeignKey(StackOverflowComment.STACK_OVERFLOW_COMMENT,
            DSL.name("CONSTRAINT_FF"),
            new TableField[] {StackOverflowComment.STACK_OVERFLOW_COMMENT.WEBSITE_INFO_ID},
            Keys.CONSTRAINT_9,
            new TableField[] {StackoverflowInfo.STACKOVERFLOW_INFO.WEBSITE_INFO_ID},
            true
        );
    public static final ForeignKey<StackoverflowInfoRecord, WebsiteInfoRecord> CONSTRAINT_92 =
        Internal.createForeignKey(StackoverflowInfo.STACKOVERFLOW_INFO,
            DSL.name("CONSTRAINT_92"),
            new TableField[] {StackoverflowInfo.STACKOVERFLOW_INFO.WEBSITE_INFO_ID},
            Keys.CONSTRAINT_4,
            new TableField[] {WebsiteInfo.WEBSITE_INFO.ID},
            true
        );
    public static final ForeignKey<TrackedLinkRecord, WebsiteInfoRecord> CONSTRAINT_36 = Internal.createForeignKey(
        TrackedLink.TRACKED_LINK,
        DSL.name("CONSTRAINT_36"),
        new TableField[] {TrackedLink.TRACKED_LINK.WEBSITE_INFO_ID},
        Keys.CONSTRAINT_4,
        new TableField[] {WebsiteInfo.WEBSITE_INFO.ID},
        true
    );
    public static final ForeignKey<TrackedLinkRecord, ChatRecord> CONSTRAINT_368 =
        Internal.createForeignKey(TrackedLink.TRACKED_LINK,
            DSL.name("CONSTRAINT_368"),
            new TableField[] {TrackedLink.TRACKED_LINK.CHAT_ID},
            Keys.CONSTRAINT_1,
            new TableField[] {Chat.CHAT.ID},
            true
        );
    public static final ForeignKey<WebsiteInfoRecord, WebsiteInfoTypeRecord> CONSTRAINT_41 = Internal.createForeignKey(
        WebsiteInfo.WEBSITE_INFO,
        DSL.name("CONSTRAINT_41"),
        new TableField[] {WebsiteInfo.WEBSITE_INFO.TYPE_ID},
        Keys.CONSTRAINT_D,
        new TableField[] {WebsiteInfoType.WEBSITE_INFO_TYPE.ID},
        true
    );
}
