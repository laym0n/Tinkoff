/*
 * This file is generated by jOOQ.
 */

package ru.tinkoff.edu.java.scrapper.domain.jooq.tables.records;

import java.beans.ConstructorProperties;
import javax.annotation.processing.Generated;
import org.jetbrains.annotations.NotNull;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.StackoverflowInfo;

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class StackoverflowInfoRecord extends UpdatableRecordImpl<StackoverflowInfoRecord>
    implements Record2<Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>STACKOVERFLOW_INFO.WEBSITE_INFO_ID</code>.
     */
    public void setWebsiteInfoId(@NotNull Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>STACKOVERFLOW_INFO.WEBSITE_INFO_ID</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Integer getWebsiteInfoId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>STACKOVERFLOW_INFO.QUESTION_ID</code>.
     */
    public void setQuestionId(@NotNull Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>STACKOVERFLOW_INFO.QUESTION_ID</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Integer getQuestionId() {
        return (Integer) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row2<Integer, Integer> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<Integer> field1() {
        return StackoverflowInfo.STACKOVERFLOW_INFO.WEBSITE_INFO_ID;
    }

    @Override
    @NotNull
    public Field<Integer> field2() {
        return StackoverflowInfo.STACKOVERFLOW_INFO.QUESTION_ID;
    }

    @Override
    @NotNull
    public Integer component1() {
        return getWebsiteInfoId();
    }

    @Override
    @NotNull
    public Integer component2() {
        return getQuestionId();
    }

    @Override
    @NotNull
    public Integer value1() {
        return getWebsiteInfoId();
    }

    @Override
    @NotNull
    public Integer value2() {
        return getQuestionId();
    }

    @Override
    @NotNull
    public StackoverflowInfoRecord value1(@NotNull Integer value) {
        setWebsiteInfoId(value);
        return this;
    }

    @Override
    @NotNull
    public StackoverflowInfoRecord value2(@NotNull Integer value) {
        setQuestionId(value);
        return this;
    }

    @Override
    @NotNull
    public StackoverflowInfoRecord values(@NotNull Integer value1, @NotNull Integer value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached StackoverflowInfoRecord
     */
    public StackoverflowInfoRecord() {
        super(StackoverflowInfo.STACKOVERFLOW_INFO);
    }

    /**
     * Create a detached, initialised StackoverflowInfoRecord
     */
    @ConstructorProperties({"websiteInfoId", "questionId"})
    public StackoverflowInfoRecord(@NotNull Integer websiteInfoId, @NotNull Integer questionId) {
        super(StackoverflowInfo.STACKOVERFLOW_INFO);

        setWebsiteInfoId(websiteInfoId);
        setQuestionId(questionId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised StackoverflowInfoRecord
     */
    public StackoverflowInfoRecord(ru.tinkoff.edu.java.scrapper.domain.jooq.tables.pojos.StackoverflowInfo value) {
        super(StackoverflowInfo.STACKOVERFLOW_INFO);

        if (value != null) {
            setWebsiteInfoId(value.getWebsiteInfoId());
            setQuestionId(value.getQuestionId());
            resetChangedOnNotNull();
        }
    }
}
