/*
 * This file is generated by jOOQ.
 */

package ru.tinkoff.edu.java.scrapper.domain.jooq.tables.records;

import jakarta.validation.constraints.Size;
import java.beans.ConstructorProperties;
import javax.annotation.processing.Generated;
import org.jetbrains.annotations.NotNull;
import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.GithubCommit;

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class GithubCommitRecord extends UpdatableRecordImpl<GithubCommitRecord> implements Record2<String, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>GITHUB_COMMIT.SHA</code>.
     */
    public void setSha(@NotNull String value) {
        set(0, value);
    }

    /**
     * Getter for <code>GITHUB_COMMIT.SHA</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 40)
    @NotNull
    public String getSha() {
        return (String) get(0);
    }

    /**
     * Setter for <code>GITHUB_COMMIT.WEBSITE_INFO_ID</code>.
     */
    public void setWebsiteInfoId(@NotNull Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>GITHUB_COMMIT.WEBSITE_INFO_ID</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Integer getWebsiteInfoId() {
        return (Integer) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Record2<String, Integer> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row2<String, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row2<String, Integer> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<String> field1() {
        return GithubCommit.GITHUB_COMMIT.SHA;
    }

    @Override
    @NotNull
    public Field<Integer> field2() {
        return GithubCommit.GITHUB_COMMIT.WEBSITE_INFO_ID;
    }

    @Override
    @NotNull
    public String component1() {
        return getSha();
    }

    @Override
    @NotNull
    public Integer component2() {
        return getWebsiteInfoId();
    }

    @Override
    @NotNull
    public String value1() {
        return getSha();
    }

    @Override
    @NotNull
    public Integer value2() {
        return getWebsiteInfoId();
    }

    @Override
    @NotNull
    public GithubCommitRecord value1(@NotNull String value) {
        setSha(value);
        return this;
    }

    @Override
    @NotNull
    public GithubCommitRecord value2(@NotNull Integer value) {
        setWebsiteInfoId(value);
        return this;
    }

    @Override
    @NotNull
    public GithubCommitRecord values(@NotNull String value1, @NotNull Integer value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GithubCommitRecord
     */
    public GithubCommitRecord() {
        super(GithubCommit.GITHUB_COMMIT);
    }

    /**
     * Create a detached, initialised GithubCommitRecord
     */
    @ConstructorProperties({"sha", "websiteInfoId"})
    public GithubCommitRecord(@NotNull String sha, @NotNull Integer websiteInfoId) {
        super(GithubCommit.GITHUB_COMMIT);

        setSha(sha);
        setWebsiteInfoId(websiteInfoId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised GithubCommitRecord
     */
    public GithubCommitRecord(ru.tinkoff.edu.java.scrapper.domain.jooq.tables.pojos.GithubCommit value) {
        super(GithubCommit.GITHUB_COMMIT);

        if (value != null) {
            setSha(value.getSha());
            setWebsiteInfoId(value.getWebsiteInfoId());
            resetChangedOnNotNull();
        }
    }
}
