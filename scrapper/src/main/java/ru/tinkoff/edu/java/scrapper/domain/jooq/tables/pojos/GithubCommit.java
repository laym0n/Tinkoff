/*
 * This file is generated by jOOQ.
 */

package ru.tinkoff.edu.java.scrapper.domain.jooq.tables.pojos;

import jakarta.validation.constraints.Size;
import java.beans.ConstructorProperties;
import java.io.Serializable;
import javax.annotation.processing.Generated;
import org.jetbrains.annotations.NotNull;

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class GithubCommit implements Serializable {

    private static final long serialVersionUID = 1L;

    private String sha;
    private Integer websiteInfoId;

    public GithubCommit() {
    }

    public GithubCommit(GithubCommit value) {
        this.sha = value.sha;
        this.websiteInfoId = value.websiteInfoId;
    }

    @ConstructorProperties({"sha", "websiteInfoId"})
    public GithubCommit(
        @NotNull String sha,
        @NotNull Integer websiteInfoId
    ) {
        this.sha = sha;
        this.websiteInfoId = websiteInfoId;
    }

    /**
     * Getter for <code>GITHUB_COMMIT.SHA</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 40)
    @NotNull
    public String getSha() {
        return this.sha;
    }

    /**
     * Setter for <code>GITHUB_COMMIT.SHA</code>.
     */
    public void setSha(@NotNull String sha) {
        this.sha = sha;
    }

    /**
     * Getter for <code>GITHUB_COMMIT.WEBSITE_INFO_ID</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Integer getWebsiteInfoId() {
        return this.websiteInfoId;
    }

    /**
     * Setter for <code>GITHUB_COMMIT.WEBSITE_INFO_ID</code>.
     */
    public void setWebsiteInfoId(@NotNull Integer websiteInfoId) {
        this.websiteInfoId = websiteInfoId;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final GithubCommit other = (GithubCommit) obj;
        if (this.sha == null) {
            if (other.sha != null) {
                return false;
            }
        } else if (!this.sha.equals(other.sha)) {
            return false;
        }
        if (this.websiteInfoId == null) {
            if (other.websiteInfoId != null) {
                return false;
            }
        } else if (!this.websiteInfoId.equals(other.websiteInfoId)) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.sha == null) ? 0 : this.sha.hashCode());
        result = prime * result + ((this.websiteInfoId == null) ? 0 : this.websiteInfoId.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("GithubCommit (");

        sb.append(sha);
        sb.append(", ").append(websiteInfoId);

        sb.append(")");
        return sb.toString();
    }
}
